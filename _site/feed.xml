<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | Umang Galaiya</title>
    <description>Musings from my everyday life as a Software Engineer</description>
    <link>https://umanggalaiya.in/blog/</link>
    <atom:link href="https://umanggalaiya.in/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 16 Jun 2018 22:32:20 +0530</pubDate>
    <lastBuildDate>Sat, 16 Jun 2018 22:32:20 +0530</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>The no-bullshit guide to getting started with Git: Part 1</title>
        <description>&lt;p&gt;Learning Git has a little bit of a steep learning curve. But it does not have to be this difficult. Here’s a no-bullshit guide to getting started with Git.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;When I was getting my hands dirty with Git back in college, there were very limited guides and all of them were &lt;em&gt;extremely&lt;/em&gt; technical and not very dummy-friendly. Then, guides to Git for dummies started to pop up, but they were full of extra BS that served no purpose except to confuse the reader. Here’s my attempt at making a guide that my past self would have vastly benefitted from.&lt;/p&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;what-is-git&quot;&gt;What is git?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git-scm.com&lt;/a&gt; has the following definition:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s remove all the extra jargon and simplify the definition a bit.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git is a free and open-source version control system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;okay-but-what-is-a-version-control-system&quot;&gt;Okay, but what is a Version Control System?&lt;/h3&gt;

&lt;p&gt;Good question. Let’s figure out what a version control system really means.&lt;/p&gt;

&lt;p&gt;Version Control System (VCS for short) has two different meanings. One is what VCSes are on a human-level, and the other is what VCSes mean in the Software Industry. We’ll start by understanding what a VCS means on a human-level.&lt;/p&gt;

&lt;p&gt;Each of us has some sort of an intuitive version management system, which follows something along the lines of having different copies of the same project, each with different (and mostly incremental) changes. It looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://umanggalaiya.in/blog/img/git-guide/human-vcs.png&quot; alt=&quot;&amp;quot;Version Control on a human level&amp;quot;&quot; title=&quot;Version Control on a human level&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A version management system like this works, but it starts showing some inherent problems when you are working with multiple people on the same project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What changes does &lt;code class=&quot;highlighter-rouge&quot;&gt;Final 2&lt;/code&gt; contain? Why were the changes made? When were they made? Who made them? Alice made some changes and named them &lt;code class=&quot;highlighter-rouge&quot;&gt;Final 2&lt;/code&gt;. So did Bob. Whose &lt;code class=&quot;highlighter-rouge&quot;&gt;Final 2&lt;/code&gt; do we consider?&lt;/li&gt;
  &lt;li&gt;Bob wants to make some changes on top of Alice’s &lt;code class=&quot;highlighter-rouge&quot;&gt;final june 2018&lt;/code&gt;. So, Alice sent Bob the entire directory &lt;code class=&quot;highlighter-rouge&quot;&gt;final june 2018&lt;/code&gt;. Oops, Bob just realized that the changes Alice made weren’t up to the specifications and are completely wrong. He decides to discard the last changes Alice made and make his own changes to fix the project. He goes to Alice.
&lt;img src=&quot;https://umanggalaiya.in/blog/img/git-guide/comics/comic-1.png&quot; alt=&quot;&amp;quot;Problems with the Intuitive VCS&amp;quot;&quot; title=&quot;Problems with the Intuitive VCS&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s try to fix these problems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of names like &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Final 2&lt;/code&gt;, etc., we can instead use numbers. Or timestamps. Or anything that’s a unique identifier. Let’s go with numbers.&lt;/li&gt;
  &lt;li&gt;We can keep a &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGES.txt&lt;/code&gt; within each copy of the project, where the author of the changes in that copy will describe all the changes made within that copy along with the reasoning for it.&lt;/li&gt;
  &lt;li&gt;We can also keep a master &lt;code class=&quot;highlighter-rouge&quot;&gt;LOG.txt&lt;/code&gt; file which contains the time when a copy was published, who made the copy, and the logical order of copies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These fixes sound pretty trivial and should easily fix our problems, but anyone who has tried to enforce standards on a bunch of human entities knows this is close to impossible to achieve across teams, let alone across the industry. Nevertheless, we just devised our own version control system.&lt;/p&gt;

&lt;p&gt;Now that we understand what a version control system is and why we need it, let’s answer the next question.&lt;/p&gt;

&lt;h3 id=&quot;why-git&quot;&gt;Why Git?&lt;/h3&gt;

&lt;p&gt;There are lots of version control systems out there. A simple &lt;a href=&quot;https://www.google.com/search?q=version+control+systems&quot;&gt;Google search&lt;/a&gt; lists more than ten version control systems. To add to it, why not use the version control system we just devised? Why would someone want to use Git over everything else?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://umanggalaiya.in/blog/img/git-guide/vcs-list.png&quot; alt=&quot;&amp;quot;Version Control Systems from Google Search&amp;quot;&quot; title=&quot;Version Control Systems from Google Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a long answer too, but I’m going to go with the shorter one: Git is everywhere. Chances are, if you work at any of the startups spawned within the last three to five years, you will end up using Git. And GitHub is a pretty popular place to host source code of open source projects as well as a great way to showcase your programming prowess.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait, are Git and GitHub different?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes. Git is a protocol - a VCS. GitHub is where you can store the project. A good (although a &lt;em&gt;tiny&lt;/em&gt; bit flawed) analogy can be seen in the difference between Pizza and Pizza places like Dominos and Pizza Hut. Food = VCS, Pizza = Git, Dominos = GitHub.&lt;/p&gt;

&lt;p&gt;There are alternatives to GitHub too, like GitLab and BitBucket. They too use Git as the protocol. However, for the rest of the guide, I will be using GitHub as the example while talking about Git hosting providers.&lt;/p&gt;

&lt;h3 id=&quot;lets-go-over-some-terms&quot;&gt;Let’s go over some terms.&lt;/h3&gt;

&lt;h5 id=&quot;what-is-a-repository&quot;&gt;What is a repository?&lt;/h5&gt;

&lt;p&gt;A repository is a project in terms of Git. If you were building Uber, the entire project could be one repository, say &lt;code class=&quot;highlighter-rouge&quot;&gt;uber&lt;/code&gt;. Or, if you decide to separate different parts of the project into their own sub-projects, you could come up with multiple repositories like &lt;code class=&quot;highlighter-rouge&quot;&gt;uber-backend&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;uber-android&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;uber-ios&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;uber-web&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;“repo” is an alias for “repository”.&lt;/p&gt;

&lt;h5 id=&quot;what-is-a-repository-url&quot;&gt;What is a repository URL?&lt;/h5&gt;

&lt;p&gt;A Git project exists at a certain URL. Think of this URL as the copy of the project that is the source-of-truth. All the changes you make get saved here, and all the changes that someone else made that you want to incorporate into your own copy will be fetched from here.&lt;/p&gt;

&lt;p&gt;Let us consider this repository: &lt;a href=&quot;https://github.com/github/explore&quot;&gt;https://github.com/github/explore&lt;/a&gt;. If you click on the green “Clone or Download” button, you will see a URL for the repo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://umanggalaiya.in/blog/img/git-guide/repo-url.png&quot; alt=&quot;&amp;quot;Repository URL&amp;quot;&quot; title=&quot;Repository URL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might see any of the following two URLS:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;git@github.com:github/explore.git&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git@github.com:github/explore.git&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/github/explore.git&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/github/explore.git&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first is the SSH URL, while the second is the HTTPS URL. The text that says “Use SSH” and “Use HTTPS” can be used to switch between the two.&lt;/p&gt;

&lt;h5 id=&quot;what-are-the-differences-between-https-url-and-ssh-url&quot;&gt;What are the differences between HTTPS URL and SSH URL?&lt;/h5&gt;

&lt;p&gt;This answer requires you to be familiar with SSH. If you are not, consider SSH to be a proof-of-identity that says, “Hey, this device belongs to John.” There is an SSH key I can set up on my computer and tell GitHub that for any requests that have this key, assume the user to be me. That SSH key then becomes a way to identify my computer.&lt;/p&gt;

&lt;p&gt;Repos can be fetched over HTTPS as well as SSH. Fetching changes from a public repository doesn’t require your identity, but adding changes to the repository does. The repository needs to know which user intends to save the user. Fetching changes from a private repository requries your identity, though, due to access-control.&lt;/p&gt;

&lt;p&gt;If you use SSH, your SSH key acts as the identifier. If you use HTTPS, you will need to use your email and password to identify yourself.&lt;/p&gt;

&lt;p&gt;I personally prefer using SSH because I don’t need to enter my email and password every time I need to identify myself, the SSH key handles it automatically. However, SSH requires a setup. If you are just starting out, I would recommend you use HTTPS.&lt;/p&gt;

&lt;p&gt;To fetch a repository, you would need to use the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone &amp;lt;repo-url&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the example above, one would use &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/github/explore.git&lt;/code&gt;. This would make a directory named &lt;code class=&quot;highlighter-rouge&quot;&gt;explore&lt;/code&gt; containing the contents of the repository.&lt;/p&gt;

&lt;p&gt;This is also known as “cloning” a repository.&lt;/p&gt;

&lt;h3 id=&quot;exercises-for-the-reader&quot;&gt;Exercises for the reader&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Set up Git.&lt;/li&gt;
  &lt;li&gt;Clone 3 repositories.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;whats-coming-in-the-next-parts&quot;&gt;What’s coming in the next parts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What are diffs?&lt;/li&gt;
  &lt;li&gt;What is staging?&lt;/li&gt;
  &lt;li&gt;What are commits?&lt;/li&gt;
  &lt;li&gt;What are branches?&lt;/li&gt;
  &lt;li&gt;What is a merge?&lt;/li&gt;
  &lt;li&gt;What are merge conflicts?&lt;/li&gt;
  &lt;li&gt;How does one fix merge conflicts?&lt;/li&gt;
  &lt;li&gt;What is a pull request?&lt;/li&gt;
  &lt;li&gt;Commonly used patterns for Git.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there’s something that you would like to add to this list, please leave a comment and if it is beginner friendly, I will make sure to add it to the upcoming parts.&lt;/p&gt;

&lt;p&gt;If there is something in this part that you feel could be explained in simpler terms, please let me know and I shall update this.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jun 2018 05:30:00 +0530</pubDate>
        <link>https://umanggalaiya.in/blog/2018/no-bs-git-guide-part-1.html</link>
        <guid isPermaLink="true">https://umanggalaiya.in/blog/2018/no-bs-git-guide-part-1.html</guid>
        
        
        <category>technology</category>
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Making viewing diffs on GitHub a bit better</title>
        <description>&lt;p&gt;Viewing large diffs on GitHub is a bit of a pain in the ass. I made a Chrome extension to make it slightly better.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If you spend quite some time comparing commits or branches or just reviewing large PRs in general, you might have noticed your browser taking a performance hit while you are in GitHub’s compare view and there are just a bit too many files in the diff. Folding some files helps, but that’s a lot of manual effort. Let’s automate it.&lt;/p&gt;

&lt;p&gt;There are exactly two reasons why I prefer files to be folded:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My browser doesn’t take a performance hit.&lt;/li&gt;
  &lt;li&gt;If there is only one file open, I know I have looked at all the files above it and need to look at all the files below it. &lt;em&gt;Kind of like a bookmark, maybe?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I messed around with DevTools a bit and wrote some JS that I can execute in the console to fold all the files, but then I had to press the up arrow key multiple times to reach the command, or if it’s been a long time, look for it wherever I had stored it. Again, too much effort to do something trivial.&lt;/p&gt;

&lt;p&gt;I got a little annoyed and decided it shouldn’t be this difficult and time consuming. So, I spent some time building a &lt;a href=&quot;https://chrome.google.com/webstore/detail/fold-github-files/gihbbindmbgaabmockjcmlghaphecage&quot;&gt;Chrome extension&lt;/a&gt; to do this. &lt;em&gt;Ironic, I know.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://umanggalaiya.in/blog/img/fold-github-files-interface.png&quot; alt=&quot;Fold GitHub Files&quot; style=&quot;margin-left: 0; margin-right: 0;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a simple enough tool that does something &lt;em&gt;extremely&lt;/em&gt; trivial that GitHub should support by default. Until they do, this Chrome Extension will have to do. Download it from &lt;a href=&quot;https://chrome.google.com/webstore/detail/fold-github-files/gihbbindmbgaabmockjcmlghaphecage&quot;&gt;here&lt;/a&gt;, and view the &lt;a href=&quot;https://github.com/umanghome/fold-unfold-github/&quot;&gt;source code on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/2UBzh5JhVEKyNRaMml/giphy.gif&quot; alt=&quot;Fold GitHub Files in action&quot; style=&quot;margin-left: 0; margin-right: 0;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s to making using the web better.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jun 2018 05:30:00 +0530</pubDate>
        <link>https://umanggalaiya.in/blog/2018/easier-diffs-github.html</link>
        <guid isPermaLink="true">https://umanggalaiya.in/blog/2018/easier-diffs-github.html</guid>
        
        
        <category>technology</category>
        
        <category>software</category>
        
        <category>product</category>
        
      </item>
    
      <item>
        <title>Reconnect - An experiment to reconnect</title>
        <description>&lt;p&gt;In the final quarter of 2017, I set out to validate a personal idea I had been sitting on for a while - a service that reminds me to reconnect with the people I know but don’t meet on a regular basis.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The number of people I know keeps on increasing, and being busy adults (debatable) living in different parts of the world, I don’t get to catch up with each and every person I’d like to. This is partly because there are way too many people for me to remember and I’m &lt;em&gt;terrible&lt;/em&gt; with names. I figured every once a while, I should drop a text that said something along the lines of “Hey! What’s up? How have you been?”&lt;/p&gt;

&lt;p&gt;Once a month sounded good enough to catch up with people. I went through my contact-book and started writing the names of people on my text editor. I then wrote a script (&lt;a href=&quot;https://github.com/umanghome/reconnect&quot;&gt;GitHub repo&lt;/a&gt;) that would remind me to &lt;em&gt;reconnect&lt;/em&gt; with certain people every day at a certain time.&lt;/p&gt;

&lt;p&gt;Since this was supposed to be just an experiment, I didn’t want to spend too much time building an application. The script that I ended up writing would send me an email every day at 6:30 PM, reading names from a file. I religiously followed these reminder emails for about two months, after that I would dismiss the notifications from my phone and forget about it until the weekend, when I would send the “Hey! What’s up?” texts to all the people I was supposed to reconnect with over the week.&lt;/p&gt;

&lt;p&gt;Here’s what I learned from the experiment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt; - The time I set (6:30 PM) didn’t work very well. During weekdays, I would probably be focused on work and would ignore the notifications on my phone. By the time I got to check my phone, it would be overflowing with notifications and I would probably dismiss them all. The time at which I would be reminded should have been some time when there was a high chance of me already being on my phone. During the commute to work, maybe?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Emails&lt;/strong&gt; - Email is probably not the best medium to deliver the reminders. My inbox got cluttered up, and I would have multiple emails in a single notification on my phone, which would only show the most recent two unless I make an effort to see the entire list, which of course I rarely would. This throws the “reminder” part of the experiment out of the window. I’ll admit if there was just a single notification with not lots of extra clutter, I would pay heed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;When to reconnect with whom&lt;/strong&gt; - The script I wrote would pick multiple people to reconnect with every day, in a way that everyone would be picked exactly once each month. However, there are multiple people each much whom I would already have reconnected over a birthday wish. If the service reminds me to reconnect with a person two days after their birthday, it doesn’t make much sense too. The service should have a feature that accounts for people’s birthday. Maybe in v2?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Modifications&lt;/strong&gt; - The time at which I received the email and the list of people would require about two minutes of effort to update, but two minutes is a bit too much to update something so trivial. Hence, I haven’t updated anything so far. There should have been an easier way to update the list of people and the time at which I want to be reminded.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking these learnings into consideration, I reckon it would be a better idea to make something accessible from a mobile phone that would allow me to update the people-list and the time at which I want to be reminded. The medium of these reminders should be something other than emails as well. Push notifications, maybe? Building a mobile app takes too much time of which there’s a growing scarcity.&lt;/p&gt;

&lt;p&gt;Would you use a mobile app that reminded you to reconnect with the people you care about every day? Let me know. If enough people show interest, I might just invest a bit of time to build something usable by everyone. ✌🏼&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There’s a list of enhancements at the &lt;a href=&quot;https://github.com/umanghome/reconnect&quot;&gt;GitHub repo&lt;/a&gt; if you’d like to build something on this idea.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Feb 2018 17:30:00 +0530</pubDate>
        <link>https://umanggalaiya.in/blog/2018/reconnect.html</link>
        <guid isPermaLink="true">https://umanggalaiya.in/blog/2018/reconnect.html</guid>
        
        
        <category>technology</category>
        
        <category>experiments</category>
        
        <category>software</category>
        
        <category>product</category>
        
      </item>
    
      <item>
        <title>Building LeapDrop</title>
        <description>&lt;p&gt;Hi, there. I’ve been meaning to write a post about how we built LeapDrop at the
&lt;a href=&quot;https://hackinout.co/&quot;&gt;InOut&lt;/a&gt; 3.0 Hackathon. We eventually won Best Hardware
Hack sponsored by &lt;a href=&quot;https://www.hackster.io/&quot;&gt;Hackster.io&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Team TheGeekBros has three bros in it: &lt;a href=&quot;http://siddharth.xyz/&quot;&gt;Siddharth
Goswami&lt;/a&gt;, &lt;a href=&quot;https://sohamdodia.in/&quot;&gt;Soham Dodia&lt;/a&gt;, and
&lt;a href=&quot;https://umanggalaiya.in/&quot;&gt;I&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;InOut had lots of tracks this time around, so we got to dabble around various
ideas — eventually settling onto building something in the
Virtual-Reality/Augmented-Reality track — something that’s been an interest of
ours for a really long time.&lt;/p&gt;

&lt;p&gt;We had a couple of ideas: a zombie-shooter FPS based on AR, a VR desktop
experience (sort of like &lt;a href=&quot;https://cindori.org/vrdesktop/&quot;&gt;this&lt;/a&gt;). We had a
&lt;a href=&quot;https://www.leapmotion.com/&quot;&gt;LeapMotion&lt;/a&gt;, a borrowed &lt;a href=&quot;https://vr.google.com/cardboard/&quot;&gt;Google
Cardboard&lt;/a&gt; knock-off, and some two-way tape to
piece it all together.&lt;/p&gt;

&lt;p&gt;Now, none of us really knew how to proceed with any of the ideas. We didn’t have
experience writing code to build VR/AR experiences — just some ideas in our
heads — results of all those hours of sci-fi entertainment. So we sat there for
two hours, cracking jokes and Googling stuff. It became evident after
inefficiently sharing links back-and-forth for a while that it would be
practically impossible for us to work on any of our ideas so far. Then it hit
us.&lt;/p&gt;

&lt;p&gt;We’d been sharing links really inefficiently. I don’t remember how, but maybe it
was a Messenger group? We recalled this scene from the first Iron Man movie
where Tony Stark movies stuff across computers (and onto a hologram) using just
his hands:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WNu6fRo_7fg?start=4&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Watch 0:05 to 0:20&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Why couldn’t we do this for sharing web pages? We had a LeapMotion that could
very well detect hand gestures to do something like this. And thus, we set off
to build LeapDrop.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LeapDrop allows people to share webpages between computers by using a simple
pinch-and-release hand gesture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The “stack” consisted of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Chrome Extension for interacting with the browser.&lt;/li&gt;
  &lt;li&gt;A Node.js server with socket.io [Web Sockets] for inter-device communication.&lt;/li&gt;
  &lt;li&gt;A LeapMotion and its JS SDK.&lt;/li&gt;
  &lt;li&gt;An Android app.&lt;/li&gt;
  &lt;li&gt;Lots of jokes and quite a bit of &lt;a href=&quot;https://9gag.com/&quot;&gt;9GAG&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The end result looked something like this.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ptT3npbsaRg&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;At the beginning when we were discussing this idea and ironing out the details
of how it’s supposed to work, it seemed that this would be a fairly simple
project and could be done in a couple of hours — maybe even in half the time of
the entire duration of the Hackathon. There’s a(n unspoken?) rule of Software
Engineering that almost nothing will ever be built in the time a developer
claims it to be. But we did manage to catch some sleep and tweak LeapDrop to
work better, so.. ¯_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;It was one hell of an experience — nerd jokes, memes, working with the coolest
team, and working on things which have no proper set path or guides to develop
(those are the best kind). I wouldn’t trade it for anything else. Anyway, here’s
a checkpoint. The stuff that follows now is mostly about how LeapDrop works, so
if you’re not interested in the nitty-gritty, drop a like by clicking a heart
button somewhere on this page if you liked this post so far, and have a great
day/night/whatever. 😄&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We didn’t have a set path or a guide on how to build LeapDrop. We knew how
things are supposed to work in tandem, but had no experience building anything
like this — ever.&lt;/p&gt;

&lt;p&gt;I had built a tiny (totally unrelated) Chrome Extension earlier, and had written
some socket.io code. Siddharth and Soham had experience building Android apps.
Siddharth and I had been playing with LeapMotion the previous summer. So we got
to working. In an ideal world, I would be building the Chrome Extension, but
Siddharth had already started working on it by the time Soham and I started
reading the documentation. Soham picked up Android and I got to writing
JavaScript for the server.&lt;/p&gt;

&lt;p&gt;Here’s a breakdown of what each part of the stack was doing:&lt;/p&gt;

&lt;h3 id=&quot;google-cardboard--leapmotion&quot;&gt;Google Cardboard + LeapMotion&lt;/h3&gt;

&lt;p&gt;We stuck a LeapMotion onto a Google Cardboard. The LeapMotion would detect hand
gestures. A phone running the Android app went into the Google Cardboard.&lt;/p&gt;

&lt;h3 id=&quot;nodejs-server-with-socketio&quot;&gt;&lt;strong&gt;Node.js Server with socket.io&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The server is the “controller” of sorts. Each device would be connected to it
using Web Socket. The server emits and listens to events. It tells the Chrome
Extension to show QR Codes, read URLs, and open URLs. It tells the Android App
to decode the QR Code in front of it. It listens to gestures from the
LeapMotion.&lt;/p&gt;

&lt;h3 id=&quot;chrome-extension&quot;&gt;Chrome Extension&lt;/h3&gt;

&lt;p&gt;The Chrome Extension is installed on all the participating computers. It
connects to the socket.io server. It listens for events and emits them. It shows
a QR Code when asked, it sends the URL of the last active tab when asked, and it
opens up a URL when asked.&lt;/p&gt;

&lt;h3 id=&quot;android-app&quot;&gt;Android App&lt;/h3&gt;

&lt;p&gt;The Android app connects to the socket.io server as well. (It’s a pattern,
really. Everything connects to the socket.io server.) The Android app displays
what the camera sees, and occasionally decodes QR Codes. It was supposed to be a
stereoscopic view, but Android only allows one resource to access the camera at
a given time, so we ended up with having the camera-view only in the right part
of the stereoscopic view. It was (very) lousy UX, but that’s all that we could
come up with at the time. The Android phone goes into the Google Cardboard.&lt;/p&gt;

&lt;h3 id=&quot;leapmotion-and-its-js-sdk&quot;&gt;LeapMotion and its JS SDK&lt;/h3&gt;

&lt;p&gt;If you haven’t figured out by now, the LeapMotion also connects to the socket.io
server. However, since LeapMotion cannot directly connect to anything except the
SDK, the JS SDK is running on a webpage and the webpage is connected to the
socket.io server using Web Sockets. This webpage listens for the &lt;em&gt;pinch&lt;/em&gt; and
&lt;em&gt;release&lt;/em&gt; gestures and notifies the server when they are performed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;connecting-it-all&quot;&gt;Connecting it all&lt;/h3&gt;

&lt;p&gt;Abbreviations of devices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C1 — Computer 1 with a Chrome Extension&lt;/li&gt;
  &lt;li&gt;C2 — Computer 2 with a Chrome Extension&lt;/li&gt;
  &lt;li&gt;PH — Android Phone running the LeapDrop app&lt;/li&gt;
  &lt;li&gt;LMC — LeapMotion-connected Computer&lt;/li&gt;
  &lt;li&gt;LM — LeapMotion&lt;/li&gt;
  &lt;li&gt;Server — A Node.js + socket.io server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://umanggalaiya.in/blog/img/LeapDrop.png&quot; alt=&quot;&amp;quot;How LeapDrop works&amp;quot;&quot; title=&quot;How LeapDrop works&quot; /&gt;
&lt;em&gt;Siddharth is a really great designer as well. He’s the one who created this
sweet illustration.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;C1&lt;/em&gt; registers with the &lt;em&gt;Server&lt;/em&gt;. An ID is assigned to &lt;em&gt;C1&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;C2&lt;/em&gt; registers with the &lt;em&gt;Server&lt;/em&gt;. An ID is assigned to &lt;em&gt;C2&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PH&lt;/em&gt; registers with the &lt;em&gt;Server&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LMC&lt;/em&gt; registers with the &lt;em&gt;Server&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LM&lt;/em&gt; detects a pinch gesture.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LM&lt;/em&gt; notifies &lt;em&gt;LMC&lt;/em&gt; about the detected pinch gesture.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LMC&lt;/em&gt; notifies the &lt;em&gt;Server&lt;/em&gt; about the detected pinch gesture.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks &lt;em&gt;C1&lt;/em&gt; to show its QR Code. This QR Code has encoded within itself
the ID assigned to it in Step 1.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks &lt;em&gt;C2&lt;/em&gt; to show its QR Code. This QR Code has encoded within itself
the ID assigned to it in Step 2.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks &lt;em&gt;PH&lt;/em&gt; to detect the QR Code it sees, and send whatever the QR Code
has encoded within itself. [This works because when the user makes a pinch
gesture in front of a computer, the head-mounted mobile-phone camera will see
the QR Code of the source computer.]&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PH&lt;/em&gt; sends the decoded ID of the source computer to the Server. [&lt;em&gt;C1&lt;/em&gt; in this
case.]&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks the computer to which the ID belongs [&lt;em&gt;C1&lt;/em&gt; in this case] to send
it’s last visited URL.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;C1&lt;/em&gt; sends the last visited URL to the &lt;em&gt;Server&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LM&lt;/em&gt; detects a release gesture.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LM&lt;/em&gt; notifies &lt;em&gt;LMC&lt;/em&gt; about the detected release gesture.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LMC&lt;/em&gt; notifies the &lt;em&gt;Server&lt;/em&gt; about the detected release gesture.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks &lt;em&gt;PH&lt;/em&gt; to detect the QR Code it sees, and send whatever the QR code
has encoded within itself. [This works because when the user makes a release
gesture in front of a computer, the head-mounted mobile-phone camera will the
the QR Code of the target computer.]&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PH&lt;/em&gt; sends the decoded ID of the target computer to the &lt;em&gt;Server&lt;/em&gt;. [&lt;em&gt;C2&lt;/em&gt; in this
case.]&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks &lt;em&gt;C1&lt;/em&gt; to stop showing its QR Code.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks &lt;em&gt;C2&lt;/em&gt; to stop showing its QR Code.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Server&lt;/em&gt; asks the target computer [&lt;em&gt;C2&lt;/em&gt; in this case] to open the URL obtained
in Step 13.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;We got a &lt;em&gt;bit&lt;/em&gt; of attention from the judges and fellow hackers around us, but
unfortunately didn’t get selected to demo on-stage. This was a real bummer,
since I can’t help but think to this date, how &lt;strong&gt;rad&lt;/strong&gt; it would have been to
grab a webpage from the projector-screen and put it on a laptop on a totally
different side of the room.&lt;/p&gt;

&lt;p&gt;Anyway, when the prizes were being announced for the Hardware category, I
thought maybe we were deserving of the third prize. The third prize was
announced and it wasn’t us. I thought maybe we were second since LeapDrop was
really cool. The second prize wasn’t us either. I gave up on winning a Hackathon
prize this time around. (&lt;em&gt;Paging&lt;/em&gt; Imposter Syndrome!) TheGeekBros flashed on the
screen as the first prize, and we took a jolly ride to Cloud 9. I had been to
the first two versions of InOut as well, but like they say: &lt;em&gt;Third time’s the
charm&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, that’s it for this &lt;em&gt;reeeeally&lt;/em&gt; long post. If you’re still reading,
thanks for sticking around for this long. 😄&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TheGeekBros/leapdrop&quot;&gt;GitHub repo for LeapDrop.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted to &lt;a href=&quot;https://hackernoon.com/building-leapdrop-f4191ff2f36d&quot;&gt;Medium&lt;/a&gt; on June 29, 2017.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Dec 2017 17:52:19 +0530</pubDate>
        <link>https://umanggalaiya.in/blog/2017/building-leapdrop.html</link>
        <guid isPermaLink="true">https://umanggalaiya.in/blog/2017/building-leapdrop.html</guid>
        
        
        <category>technology</category>
        
        <category>hackathons</category>
        
      </item>
    
      <item>
        <title>Hello, world!</title>
        <description>&lt;p&gt;Hello, world! 👋🏼&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I finally got around to making a blog in Jekyll after procrastinating for weeks. Let’s just hope I can now gather the motivation to write all the posts I have lined up on my to-do list.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Dec 2017 16:52:19 +0530</pubDate>
        <link>https://umanggalaiya.in/blog/2017/hello-world.html</link>
        <guid isPermaLink="true">https://umanggalaiya.in/blog/2017/hello-world.html</guid>
        
        
        <category>random</category>
        
      </item>
    
  </channel>
</rss>
